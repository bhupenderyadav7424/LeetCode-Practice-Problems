Solution 1 :-

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head==NULL)
            return 1;
        vector <int> v;
        while(head!=NULL)
        {
            v.push_back(head->val);
            head=head->next;
        }
        for(int i=0; i<v.size()/2; i++)
        {
            if(v[i]!=v[v.size()-1-i])
                return 0;
        }
        return 1;
    }
};


Solution 2 :-

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head==NULL)
            return 1;
        stack <int> s;
        queue <int> q;
        int count=0;
        while(head!=NULL)
        {
            s.push(head->val);
            q.push(head->val);
            head=head->next;
            count++;
        }
        for(int i=0; i<count/2; i++)
        {
            int x=s.top();
            s.pop();
            int y=q.front();
            q.pop();
            if(x!=y)
                return 0;
        }
        return 1;
    }
};
