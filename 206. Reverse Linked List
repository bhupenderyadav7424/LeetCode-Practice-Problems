Solution 1 :-

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head==NULL)
            return 0;
        ListNode *t1=NULL, *t2=NULL;
        while(head!=NULL)
        {
            t2=head->next;
            head->next=t1;
            t1=head;
            head=t2;
        }
        return t1;
    }
};


Solution 2 :-

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode *t1, ListNode *t2)
    {
        if(t2==NULL)
            return t1;
        ListNode *temp=t2->next;
        t2->next=t1;
        return reverse(t2,temp);
    }
    ListNode* reverseList(ListNode* head) {
        if(head==NULL || head->next==NULL)
            return head;
        return reverse(NULL,head);
    }
};
